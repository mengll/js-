/**
 * Created by liuwendan on 16/6/11.
 */
"use strict"

var s = "zh zheng ze haoh hao de xiang guan de shixiang danshi haiyoiu ";

var z = /\b\w+(?=ng\b)/g; //查询的是正则前面的的匹配的文本

function l(info){
    console.log(info);
}

//var v = s.match(z);

//l(v); //[ 'zhe', 'xia', 'shixia' ]
//var sc = /(?<=zh)\w+\b/;
//RegExp('\bzh\w+\b');
var rege = new RegExp('\\w+(?=oh\\b)','g'); // RegExp('(?<=\bzh)\w+\b') 关键是还要取前面的正则

l(s.match(rege));///[ 'ha' ] 正则后结果

//2 逆序肯定环视 领宽度正回顾后发断言 又称逆序坑定肯定环视 断言自身出现的问题的前面能匹配正则表达式 exp 如 re 开头的单词的后半部分 除了re以外的部分
// (?<=\bre)\w+\b  下面的字符串 reading a book  能匹配到的字符是adming
//
//如果在很长的字符串三个字符串之间加

//顺序否定环视

//领宽度负预测先行断言,又称顺序否定环视 此断言位置的后面不能匹配表达式
//匹配三个数字,后面出现的不是数字
var zc = /\d{3}(?!\d)/;
//匹配不包含连续字符串ABC的单词
var sh = /\b(?!abc\w)+\b/;

var shs = "cut"; //断言此位置的后面不能匹配表达式 exp

var zz = /c(?![au]t\b)\w+/;
var sda = /c(?![au])t/

l(zz.test(shs));

// 一个字符串中只能包含数字和字符串,并且二者都必须存在
var sf = "wwwww#2222";
var hsd = /(^\d+(?=\w+)[a-zA-Z]+\w+$)|(^[a-zA-Z]+(?=\d+)\d+\w+$)/;

//只能是字符串和数字

l(sf.match(hsd))
l(hsd.test(sf));

///断言是用来声明一个应该为真得事实,正则表达式中只有当断言为真时才会继续进行匹配,断言匹配的是一个事实,而不是内容.它们是用来查找在某些内容 但并不包含这些内容 之前或者之后也就是
一个位置( \b ^$ 应该满足的一定条件及断言 因此也成为零宽断言
)


1.顺序肯定环视 ?= exp

    零宽度正预测先行断言,又称顺序肯定环视 断言自身出现位置的后面能匹配表达式exp

2 逆序肯定环视 ?<= exp javascript 不支持

    零宽度正回顾后发断言,又称逆序肯定环视 断言自身出现位置的前面能匹配表达式 exp  (?<=\bre)\w+\b reading a book 匹配 ading


3.顺序否定环视

 零宽度负 预测先行断言,又称顺序否定环视 断言此位置的后面不能匹配表达式 exp

    匹配3位数字而且这3位数字的后面不能是数字
    \d{3}(?!\d) 后面不能是数字

4 逆序否定环视 ?<! exp

    零宽度负回顾后发断言,又称逆序否定环视 断言的前面不能匹配表达式exp

    (?<![a-z])\d{}7 前面不是小写字母的7位数字
